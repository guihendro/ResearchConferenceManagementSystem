/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package helloworld;

/**
 * @author guihendro
 */

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;
import java.util.ArrayList;

public class AuthorGUI extends javax.swing.JFrame {

    private JFrame frame;
    private JPanel homePage;
    private JPanel authorViewPaper;
    private JPanel authorSubmitPaper;
    private JPanel viewPaper;
    private final Object[] paper = new Object[3];


    /**
     * Creates new form AuthorGUI
     */
    public AuthorGUI() {
        displayAuthorGUI();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */

    // Function to display author's home page
    private void displayAuthorGUI() {

        // Set up frame
        frame = new JFrame("Author");
        frame.setResizable(false);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(100, 100, 600, 500);
        frame.getContentPane().setLayout(new CardLayout(0, 0));
        frame.setVisible(true);

        homePage = createPanelInFrame(frame);
        homePage.setVisible(true);

        // Initialize title label
        homePage.add(createTitleLabel());

        // Initialize logout button
        JButton btnLogout = new JButton("Logout");
        btnLogout.setBounds(375, 50, 150, 31);
        homePage.add(btnLogout);
//        frame.getContentPane().add(btnLogout);

        // Initialize create a submission button
        JButton btnCreateSubmission = new JButton("Create a submission");
        btnCreateSubmission.setBounds(50, 150, 150, 31);
        homePage.add(btnCreateSubmission);

        // Initialize view submissions button
        JButton btnViewSubmission = new JButton("View submissions");
        btnViewSubmission.setBounds(50, 200, 150, 31);
        homePage.add(btnViewSubmission);

        // Initialize create a submission button
        JLabel lblCreateSubmission = new JLabel("Submit a paper to be reviewed.");
        lblCreateSubmission.setFont(new Font("Tahoma", Font.PLAIN, 14));
        lblCreateSubmission.setBounds(230, 150, 300, 31);
        homePage.add(lblCreateSubmission);

        // Initialize view submission button
        JLabel lblViewSubmission = new JLabel("View and edit your submissions.");
        lblViewSubmission.setFont(new Font("Tahoma", Font.PLAIN, 14));
        lblViewSubmission.setBounds(230, 200, 300, 31);
        homePage.add(lblViewSubmission);

        authorSubmitPaper = createPanelInFrame(frame);
        authorSubmitPaper.add(createTitleLabel());

        JButton btnUpload = new JButton("Upload file");
        btnUpload.setBounds(90, 200, 150, 30);
        authorSubmitPaper.add(btnUpload);

        JLabel lblUpload = new JLabel("Click here to upload your file");
        lblUpload.setFont(new Font("Tahoma", Font.PLAIN, 14));
        lblUpload.setBounds(250, 200, 300, 31);
        authorSubmitPaper.add(lblUpload);

        JLabel error = new JLabel("Wrong file path! Please enter it again.");
        error.setFont(new Font("Tahoma", Font.PLAIN, 14));
        error.setForeground(Color.red);
        error.setBounds(90, 250, 300, 31);
        authorSubmitPaper.add(error);
        error.setVisible(false);

        authorSubmitPaper.add(createBackButton());

        authorViewPaper = createPanelInFrame(frame);
        authorViewPaper.add(createTitleLabel());

//        authorViewPaper.add(btnLogout);

        JButton refreshButton = new JButton("Refresh");
        refreshButton.setBounds(50, 100, 80, 20);
        authorViewPaper.add(refreshButton);

        JTextField txtPaperName = new JTextField();
        txtPaperName.setBounds(160, 100, 160, 20);
        txtPaperName.setColumns(10);
        authorViewPaper.add(txtPaperName);

        JButton btnSearchPaper = new JButton("Search");
        btnSearchPaper.setBounds(330, 100, 80, 20);
        authorViewPaper.add(btnSearchPaper);

        DefaultTableModel dtm_view;
        JTable table_view;

        String[] columnNames = new String[]{"ID", "File Name", "Status"};
        dtm_view = new DefaultTableModel(columnNames,0);


//        String[] columnNames = new String[]{"File Name","View","Edit"};
        String[] detailColumn = new String[]{"Reviewer ID", "Rating", "Comment", "Review Status"};
        DefaultTableModel dtm_details = new DefaultTableModel(detailColumn, 0);

        table_view = new JTable(dtm_view);
        table_view.getTableHeader().setReorderingAllowed(false);
        table_view.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        table_view.setDefaultEditor(Object.class, null);
        table_view.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        viewPaper = createPanelInFrame(frame);
        viewPaper.add(createBackButton());
        JLabel lbl_viewPaper_title = new JLabel();
        lbl_viewPaper_title.setFont(new Font("Tahoma", Font.BOLD, 10));
        lbl_viewPaper_title.setBounds(50, 50, 500, 31);
        viewPaper.add(lbl_viewPaper_title);

        JScrollPane jsp_view = new JScrollPane(table_view);
        jsp_view.setBounds(50, 150, 400, 200);
        jsp_view.setVisible(true);
        authorViewPaper.add(jsp_view);

        JButton btnView = new JButton("View");
        JButton btnEdit = new JButton("Edit");
        JButton btnDelete = new JButton("Delete");
        JButton btnDownload = new JButton("Download");
        btnView.setBounds(300, 360, 75, 25);
        btnEdit.setBounds(380, 360, 75, 25);
        btnDelete.setBounds(460, 360, 75, 25);
        btnDownload.setBounds(195, 360, 100, 25);
        authorViewPaper.add(btnView);
        authorViewPaper.add(btnDownload);
        authorViewPaper.add(btnEdit);
        authorViewPaper.add(btnDelete);
        authorViewPaper.add(createBackButton());

        refreshButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
//                String getDataSQL = "SELECT papers.paperID, name, review_status from papers JOIN authors on authors.paperID = papers.paperID where authors.userID = ?";
                AuthorViewSubmissionController controller = new AuthorViewSubmissionController();
                controller.getViewTableModel(dtm_view);
            }
        });

        btnSearchPaper.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dtm_view.setRowCount(0);
                String searchWord = txtPaperName.getText();
//                System.out.println("'%"+searchWord+"%'");
               AuthorSearchSubmissionController as = new AuthorSearchSubmissionController();
               ArrayList<Object[]> results = as.searchSubmission(searchWord);
                for (Object[] result : results) {
                    dtm_view.addRow(result);
                }

            }
        });

        btnEdit.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (table_view.getSelectedRow()<0)
                    return;
                int select_row = table_view.getSelectedRow();
                int col = 0;
                for (int i = 0; i < 3; i++) {
//            paper(id,name,status)
                    paper[i] = table_view.getValueAt(select_row, col);
                    col++;
                }
                if (!((String)paper[2]).equalsIgnoreCase("PENDING")){
//                    JOptionPane.showMessageDialog(frame,"This paper has been accepted/rejected, can't edit it anymore","Error",JOptionPane.ERROR_MESSAGE);
                    return;
                }
                AuthorEditSubmissionController ae = new AuthorEditSubmissionController();
                ae.editSubmission(frame,table_view);

            }
        });

        btnDelete.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                AuthorDeleteSubmissionController ad = new AuthorDeleteSubmissionController();
                ad.deleteSubmission(table_view,dtm_view);
            }
        });

        btnView.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                AuthorViewSubmissionController av = new AuthorViewSubmissionController();
                if (table_view.getSelectedRow()<0)
                    return;
                authorViewPaper.setVisible(false);
                viewPaper.setVisible(true);
                dtm_details.setRowCount(0);
                Object[] paper = Author.getPaper(table_view);
                String paper_title = "#" + paper[0] + " " + paper[1];
                lbl_viewPaper_title.setText("Details for paper " + paper_title);
                ArrayList<Object[]> papers = av.viewSubmission(paper);
                for (Object[] objects : papers) {
                    dtm_details.addRow(objects);
                }

                JTable table_details = new JTable(dtm_details);
                table_details.getTableHeader().setReorderingAllowed(false);
                table_details.setDefaultEditor(Object.class, null);
                JScrollPane jsp_details = new JScrollPane(table_details);
                jsp_details.setBounds(50, 100, 500, 300);
                jsp_details.setVisible(true);
                viewPaper.add(jsp_details);
            }
        });


        btnUpload.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                AuthorCreateSubmissionController ac = new AuthorCreateSubmissionController();
                ac.createSubmission(frame,error);
            }
        });


        // Add event to logout button
        btnLogout.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
               LogoutController controller = new LogoutController();
               controller.Logout(frame,btnLogout);
            }
        });

        // Add event to submit button
        btnCreateSubmission.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                homePage.setVisible(false);
                authorViewPaper.setVisible(false);
                authorSubmitPaper.setVisible(true);
            }
        });

        btnViewSubmission.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                AuthorViewSubmissionController controller = new AuthorViewSubmissionController();
                controller.getViewTableModel(dtm_view);
                homePage.setVisible(false);
                authorViewPaper.setVisible(true);
                authorSubmitPaper.setVisible(false);
            }
        });

        btnDownload.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (table_view.getSelectedRow()<0)
                    return;
                int paperID = Author.getPaperID(table_view);
                if (Author.downloadFile(paperID,frame)) {
                    JOptionPane.showMessageDialog(frame,"Download successful!!!","Congratulation",JOptionPane.INFORMATION_MESSAGE);
                }

            }

        });

    }


    public JPanel createPanelInFrame(JFrame frame) {
        JPanel panel = new JPanel();
        frame.getContentPane().add(panel);
        panel.setLayout(null);
        panel.setVisible(false);
        return panel;
    }

    public JLabel createTitleLabel() {
        JLabel lblTitle = new JLabel("Welcome Author " + User.getCurrUsername() + "!");
        lblTitle.setFont(new Font("Tahoma", Font.BOLD, 21));
        lblTitle.setBounds(50, 50, 300, 31);
        return lblTitle;
    }

    public JButton createBackButton() {
        JButton btnBack = new JButton("Back to homepage");
        btnBack.setBounds(200, 400, 150, 31);
        btnBack.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                homePage.setVisible(true);
                authorViewPaper.setVisible(false);
                authorSubmitPaper.setVisible(false);
                viewPaper.setVisible(false);
//                jsp_details.setVisible(false);
            }
        });
        return btnBack;
    }


//    public void getViewTableModel(DefaultTableModel dtm) {
//        dtm.setRowCount(0);
//        try {
//            String getDataSQL = "SELECT papers.paperID, name, acceptance_status from papers JOIN authors on authors.paperID = papers.paperID where authors.userID = ?";
//            PreparedStatement getDataStm = DatabaseConnection.getConnection().prepareStatement(getDataSQL, ResultSet.TYPE_SCROLL_SENSITIVE,
//                    ResultSet.CONCUR_UPDATABLE);
//            getDataStm.setInt(1, User.getCurrUserID());
//            ResultSet getDataRs = getDataStm.executeQuery();
////            getDataRs.beforeFirst();
//            while (getDataRs.next()) {
//                int ID = getDataRs.getInt("paperID");
//                String name = getDataRs.getString("name");
//                String status = getDataRs.getString("acceptance_status");
//                Object[] data = {ID, name, status};
//                dtm.addRow(data);
//            }
//        } catch (SQLException e) {
//            e.printStackTrace();
//        }
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
