/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package helloworld;

import java.awt.CardLayout;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.JTextArea;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JScrollPane;

import java.util.ArrayList;
import javax.swing.JComboBox;
import javax.swing.ListSelectionModel;

/**
 *
 * @author guihendro
 */
public class ReviewerGUI extends javax.swing.JFrame {

    private JFrame frame;
    private String[] papersColumnNames = {"username", "paperID", "name", "acceptance_status"};
    private String[] viewBidsColumnNames = {"paperID", "name", "status"};
    private String[] viewRatingColumnNames = {"username", "rating", "comment"};
    private String[] updateRatingColumnNames = {"paperID", "name", "rating"};
    private String username = User.getCurrUsername();
    private String currReviewPaper = "";
    
    /**
     * Creates new form ReviewerGUI
     */
    public ReviewerGUI() {
        displayReviewerGUI();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    private void displayReviewerGUI(){
        frame = new JFrame("Reviewer");
        frame.setResizable(false);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setBounds(100, 100, 600, 500);
        frame.getContentPane().setLayout(new CardLayout(0, 0));
        frame.setVisible(true);
        
        /*
            Home page panel below
        */
        
        JPanel homePage = new JPanel();
        frame.getContentPane().add(homePage);
        homePage.setLayout(null);
        homePage.setVisible(true);
        
        JLabel lblTitle = new JLabel("Welcome " + username);
        lblTitle.setFont(new Font("Tahoma", Font.BOLD, 21));
        lblTitle.setBounds(50, 50, 300, 31);
        homePage.add(lblTitle);
        
        JButton btnLogout = new JButton("Logout");
        btnLogout.setBounds(375, 50, 150, 31);
        homePage.add(btnLogout);
        
        JButton btnViewPapers = new JButton("View papers");
        btnViewPapers.setBounds(125, 150, 150, 40);
        homePage.add(btnViewPapers);
        
        JButton btnViewBids = new JButton("View my bids");
        btnViewBids.setBounds(125, 200, 150, 40);
        homePage.add(btnViewBids);
        
        JButton btnReviewPaper = new JButton("Review a paper");
        btnReviewPaper.setBounds(125, 250, 150, 40);
        homePage.add(btnReviewPaper);
        
        JButton btnSetReviewLimit = new JButton("Set review limit");
        btnSetReviewLimit.setBounds(125, 300, 150, 40);
        homePage.add(btnSetReviewLimit);
        
        JButton btnViewOtherRating = new JButton("View other reviewers' rating");
        btnViewOtherRating.setBounds(100, 350, 200, 40);
        homePage.add(btnViewOtherRating);
        
        JButton btnUpdateRating = new JButton("Update rating");
        btnUpdateRating.setBounds(325, 350, 150, 40);
        homePage.add(btnUpdateRating);
        
        JButton btnBidPaper = new JButton("Bid a paper");
        btnBidPaper.setBounds(325, 150, 150, 40);
        homePage.add(btnBidPaper);
        
        JButton btnDeleteBid = new JButton("Delete a bid");
        btnDeleteBid.setBounds(325, 200, 150, 40);
        homePage.add(btnDeleteBid);
        
        JButton btnSearchBid = new JButton("Search a bid");
        btnSearchBid.setBounds(325, 250, 150, 40);
        homePage.add(btnSearchBid);
        
        JButton btnUpdateBid = new JButton("Update bid");
        btnUpdateBid.setBounds(325, 300, 150, 40);
        homePage.add(btnUpdateBid);
        
        btnLogout.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e){
                LogoutController controller = new LogoutController();
                controller.Logout(frame,btnLogout);
            }
        });
        
        /*
            View papers panel below
        */
        
        JPanel viewPapersPanel = new JPanel();
        viewPapersPanel.setLayout(null);
        frame.getContentPane().add(viewPapersPanel);
        
        JLabel lblViewPapersTitle = new JLabel("View all submitted papers");
        lblViewPapersTitle.setFont(new Font("Tahoma", Font.BOLD, 21));
        lblViewPapersTitle.setBounds(165, 50, 300, 31);
        viewPapersPanel.add(lblViewPapersTitle);
        
        JButton btnViewPapersBack = new JButton("Back");
        btnViewPapersBack.setBounds(50, 20, 70, 35);
        viewPapersPanel.add(btnViewPapersBack);
        
        DefaultTableModel viewPapersModel = new DefaultTableModel();
        viewPapersModel.setColumnIdentifiers(papersColumnNames);
        
        JTable viewPapersTable = new JTable();
        viewPapersTable.setModel(viewPapersModel);
        viewPapersTable.setDefaultEditor(Object.class, null);
        viewPapersTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        viewPapersTable.setFillsViewportHeight(true);
        viewPapersTable.getColumnModel().getColumn(2).setPreferredWidth(200);
        
        JScrollPane viewPapersScroll = new JScrollPane(viewPapersTable);
        viewPapersScroll.setBounds(50, 150, 500, 250);
        viewPapersScroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        viewPapersScroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        viewPapersPanel.add(viewPapersScroll);
        
        btnViewPapers.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e){
                homePage.setVisible(false);
                viewPapersModel.setRowCount(0);
                
                ReviewerViewPapersController controller = new ReviewerViewPapersController();
                ArrayList<ArrayList<String>> papersList = controller.getSubmittedPapers();
                for(ArrayList<String> p : papersList){
                    viewPapersModel.addRow(new Object[]{p.get(0), p.get(1), p.get(2), p.get(3)});
                }
                viewPapersPanel.setVisible(true);
                
            }
        });
        
        btnViewPapersBack.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e){
                viewPapersPanel.setVisible(false);
                homePage.setVisible(true);
            }
        });
        
        /*
            Bid a paper panel below
        */
        
        JPanel bidPaperPanel = new JPanel();
        bidPaperPanel.setLayout(null);
        frame.getContentPane().add(bidPaperPanel);
        
        JLabel lblBidPaperTitle = new JLabel("Bid a paper");
        lblBidPaperTitle.setFont(new Font("Tahoma", Font.BOLD, 21));
        lblBidPaperTitle.setBounds(240, 50, 300, 31);
        bidPaperPanel.add(lblBidPaperTitle);
        
        JLabel lblSelectPaper = new JLabel("Select a paper ID");
        lblSelectPaper.setFont(new Font("Tahoma", Font.PLAIN, 14));
        lblSelectPaper.setBounds(50, 90, 150, 31);
        bidPaperPanel.add(lblSelectPaper);
        
        JComboBox<Object> bidPaperSelectBox = new JComboBox<Object>();
        bidPaperSelectBox.setToolTipText("");
        bidPaperSelectBox.setBounds(170, 95, 100, 22);
        bidPaperPanel.add(bidPaperSelectBox);
        
        JButton btnConfirmBid = new JButton("Bid");
        btnConfirmBid.setBounds(270, 93, 65, 25);
        bidPaperPanel.add(btnConfirmBid);
        
        JButton btnBidPaperBack = new JButton("Back");
        btnBidPaperBack.setBounds(50, 20, 70, 35);
        bidPaperPanel.add(btnBidPaperBack);
        
        DefaultTableModel bidPaperModel = new DefaultTableModel();
        bidPaperModel.setColumnIdentifiers(papersColumnNames);
        
        JTable bidPaperTable = new JTable();
        bidPaperTable.setModel(bidPaperModel);
        bidPaperTable.setDefaultEditor(Object.class, null);
        bidPaperTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        bidPaperTable.setFillsViewportHeight(true);
        bidPaperTable.getColumnModel().getColumn(2).setPreferredWidth(200);
        
        JScrollPane bidPaperScroll = new JScrollPane(bidPaperTable);
        bidPaperScroll.setBounds(50, 150, 500, 250);
        bidPaperScroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        bidPaperScroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        bidPaperPanel.add(bidPaperScroll);
        
        btnBidPaper.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e){
                homePage.setVisible(false);
                bidPaperModel.setRowCount(0);
                bidPaperSelectBox.removeAllItems();
                
                ReviewerBidPaperController controller = new ReviewerBidPaperController();
                ArrayList<String> idList = controller.getPapersId();
                for(String id : idList){
                    bidPaperSelectBox.addItem(id);
                }
                
                if(!idList.isEmpty()){
                    bidPaperSelectBox.setSelectedIndex(0);
                }
                
                ArrayList<ArrayList<String>> papersList = controller.getBiddablePapers();
                for(ArrayList<String> p : papersList){
                    bidPaperModel.addRow(new Object[]{p.get(0), p.get(1), p.get(2), p.get(3)});
                }
                bidPaperPanel.setVisible(true);
                
            }
        });
        
        btnBidPaperBack.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e){
                bidPaperPanel.setVisible(false);
                homePage.setVisible(true);
            }
        });
        
        btnConfirmBid.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e){
                String paperID = bidPaperSelectBox.getSelectedItem().toString();
                ReviewerBidPaperController controller = new ReviewerBidPaperController();
                if(!controller.eligibleForBid(username, paperID)){
                    JOptionPane.showMessageDialog(btnConfirmBid, "You have already placed a bid for this paper!", "Error", JOptionPane.ERROR_MESSAGE);
                } else{
                    controller.placeBid(username, paperID);
                    JOptionPane.showMessageDialog(btnConfirmBid, "Bid successfully placed!");
                }
            }
        });
        
        /*
            View my bids panel below
        */
        
        JPanel viewBidsPanel = new JPanel();
        viewBidsPanel.setLayout(null);
        frame.getContentPane().add(viewBidsPanel);
        
        JLabel lblViewBidsTitle = new JLabel("View all bids");
        lblViewBidsTitle.setFont(new Font("Tahoma", Font.BOLD, 21));
        lblViewBidsTitle.setBounds(240, 50, 300, 31);
        viewBidsPanel.add(lblViewBidsTitle);
        
        JButton btnViewBidsBack = new JButton("Back");
        btnViewBidsBack.setBounds(50, 20, 70, 35);
        viewBidsPanel.add(btnViewBidsBack);
        
        DefaultTableModel viewBidsModel = new DefaultTableModel();
        viewBidsModel.setColumnIdentifiers(viewBidsColumnNames);
        
        JTable viewBidsTable = new JTable();
        viewBidsTable.setModel(viewBidsModel);
        viewBidsTable.setDefaultEditor(Object.class, null);
        viewBidsTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        viewBidsTable.setFillsViewportHeight(true);
        viewBidsTable.getColumnModel().getColumn(1).setPreferredWidth(200);
        
        JScrollPane viewBidsScroll = new JScrollPane(viewBidsTable);
        viewBidsScroll.setBounds(50, 150, 500, 250);
        viewBidsScroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        viewBidsScroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        viewBidsPanel.add(viewBidsScroll);
        
        btnViewBids.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e){
                homePage.setVisible(false);
                viewBidsModel.setRowCount(0);
                
                ReviewerViewBidsController controller = new ReviewerViewBidsController();
                ArrayList<ArrayList<String>> bidsList = controller.getCompleteBidsList(username);
                for(ArrayList<String> p : bidsList){
                    viewBidsModel.addRow(new Object[]{p.get(0), p.get(1), p.get(2)});
                }
                viewBidsPanel.setVisible(true);
            }
        });
        
        btnViewBidsBack.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e){
                viewBidsPanel.setVisible(false);
                homePage.setVisible(true);
            }
        });
        
        /*
            Delete a bid panel below
        */
        
        JPanel deleteBidPanel = new JPanel();
        deleteBidPanel.setLayout(null);
        frame.getContentPane().add(deleteBidPanel);
        
        JLabel lblDeleteBidTitle = new JLabel("Delete a bid");
        lblDeleteBidTitle.setFont(new Font("Tahoma", Font.BOLD, 21));
        lblDeleteBidTitle.setBounds(240, 50, 300, 31);
        deleteBidPanel.add(lblDeleteBidTitle);
        
        JLabel lblSelectPaperDelete = new JLabel("Select a paper ID");
        lblSelectPaperDelete.setFont(new Font("Tahoma", Font.PLAIN, 14));
        lblSelectPaperDelete.setBounds(50, 90, 150, 31);
        deleteBidPanel.add(lblSelectPaperDelete);
        
        JComboBox<Object> deleteBidSelectBox = new JComboBox<Object>();
        deleteBidSelectBox.setToolTipText("");
        deleteBidSelectBox.setBounds(170, 95, 100, 22);
        deleteBidPanel.add(deleteBidSelectBox);
        
        JButton btnConfirmDeleteBid = new JButton("Delete");
        btnConfirmDeleteBid.setBounds(270, 93, 75, 25);
        deleteBidPanel.add(btnConfirmDeleteBid);
        
        JButton btnDeleteBidBack = new JButton("Back");
        btnDeleteBidBack.setBounds(50, 20, 70, 35);
        deleteBidPanel.add(btnDeleteBidBack);
        
        DefaultTableModel deleteBidModel = new DefaultTableModel();
        deleteBidModel.setColumnIdentifiers(viewBidsColumnNames);
        
        JTable deleteBidTable = new JTable();
        deleteBidTable.setModel(deleteBidModel);
        deleteBidTable.setDefaultEditor(Object.class, null);
        deleteBidTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        deleteBidTable.setFillsViewportHeight(true);
        deleteBidTable.getColumnModel().getColumn(1).setPreferredWidth(200);
        
        JScrollPane deleteBidScroll = new JScrollPane(deleteBidTable);
        deleteBidScroll.setBounds(50, 150, 500, 250);
        deleteBidScroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        deleteBidScroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        deleteBidPanel.add(deleteBidScroll);
        
        btnDeleteBid.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e){
                homePage.setVisible(false);
                deleteBidModel.setRowCount(0);
                deleteBidSelectBox.removeAllItems();
                
                ReviewerDeleteBidController controller = new ReviewerDeleteBidController();
                ArrayList<String> idList = controller.getBiddingPaperID(username);
                for(String id : idList){
                    deleteBidSelectBox.addItem(id);
                }
                
                if(!idList.isEmpty()){
                    deleteBidSelectBox.setSelectedIndex(0);
                }
                
                ArrayList<ArrayList<String>> bidsList = controller.getBidsList(username);
                for(ArrayList<String> p : bidsList){
                    deleteBidModel.addRow(new Object[]{p.get(0), p.get(1), p.get(2)});
                }
                deleteBidPanel.setVisible(true);
            }
        });
        
        btnConfirmDeleteBid.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e){
                String paperID = deleteBidSelectBox.getSelectedItem().toString();
                ReviewerDeleteBidController controller = new ReviewerDeleteBidController();
                controller.deleteBid(username, paperID);
                JOptionPane.showMessageDialog(btnConfirmBid, "Bid deleted!");
                
                deleteBidModel.setRowCount(0);
                deleteBidSelectBox.removeAllItems();
                ArrayList<String> idList = controller.getBiddingPaperID(username);
                for(String id : idList){
                    deleteBidSelectBox.addItem(id);
                }
                
                if(!idList.isEmpty()){
                    deleteBidSelectBox.setSelectedIndex(0);
                }
                
                ArrayList<ArrayList<String>> bidsList = controller.getBidsList(username);
                for(ArrayList<String> p : bidsList){
                    deleteBidModel.addRow(new Object[]{p.get(0), p.get(1), p.get(2)});
                }
            }
        });
        
        btnDeleteBidBack.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e){
                deleteBidPanel.setVisible(false);
                homePage.setVisible(true);
            }
        });
        
        /*
            Search bid panel below
        */
        
        JPanel searchBidPanel = new JPanel();
        searchBidPanel.setLayout(null);
        frame.getContentPane().add(searchBidPanel);
        
        JLabel lblSearchBidTitle = new JLabel("Search for a bid");
        lblSearchBidTitle.setFont(new Font("Tahoma", Font.BOLD, 21));
        lblSearchBidTitle.setBounds(220, 50, 300, 31);
        searchBidPanel.add(lblSearchBidTitle);
        
        JLabel lblSearchBid = new JLabel("Select a paper ID");
        lblSearchBid.setFont(new Font("Tahoma", Font.PLAIN, 14));
        lblSearchBid.setBounds(50, 90, 150, 31);
        searchBidPanel.add(lblSearchBid);
        
        JComboBox<Object> searchBidSelectBox = new JComboBox<Object>();
        searchBidSelectBox.setToolTipText("");
        searchBidSelectBox.setBounds(170, 95, 100, 22);
        searchBidPanel.add(searchBidSelectBox);
        
        JButton btnConfirmSearchBid = new JButton("Search");
        btnConfirmSearchBid.setBounds(270, 93, 75, 25);
        searchBidPanel.add(btnConfirmSearchBid);
        
        JButton btnSearchBidBack = new JButton("Back");
        btnSearchBidBack.setBounds(50, 20, 70, 35);
        searchBidPanel.add(btnSearchBidBack);
        
        DefaultTableModel searchBidModel = new DefaultTableModel();
        searchBidModel.setColumnIdentifiers(viewBidsColumnNames);
        
        JTable SearchBidTable = new JTable();
        SearchBidTable.setModel(searchBidModel);
        SearchBidTable.setDefaultEditor(Object.class, null);
        SearchBidTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        SearchBidTable.setFillsViewportHeight(true);
        SearchBidTable.getColumnModel().getColumn(1).setPreferredWidth(200);
        
        JScrollPane searchBidScroll = new JScrollPane(SearchBidTable);
        searchBidScroll.setBounds(50, 150, 500, 250);
        searchBidScroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        searchBidScroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        searchBidPanel.add(searchBidScroll);
        
        btnSearchBid.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e){
                homePage.setVisible(false);
                searchBidModel.setRowCount(0);
                searchBidSelectBox.removeAllItems();
                
                ReviewerSearchBidController controller = new ReviewerSearchBidController();
                ArrayList<String> idList = controller.getBiddingPaperID(username);
                for(String id : idList){
                    searchBidSelectBox.addItem(id);
                }
                
                if(!idList.isEmpty()){
                    searchBidSelectBox.setSelectedIndex(0);
                }
                
                searchBidPanel.setVisible(true);
            }
        });
        
        btnSearchBidBack.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e){
                searchBidPanel.setVisible(false);
                homePage.setVisible(true);
            }
        });
        
        btnConfirmSearchBid.addActionListener(new ActionListener()
        {
           public void actionPerformed(ActionEvent e){ 
                String paperID = searchBidSelectBox.getSelectedItem().toString();
                ReviewerSearchBidController controller = new ReviewerSearchBidController();
                searchBidModel.setRowCount(0);
                
                ArrayList<String> bidsList = controller.searchBid(username, paperID);
                searchBidModel.addRow(new Object[]{bidsList.get(0), bidsList.get(1), bidsList.get(2)});
           }
        });
        
        
        /*
            Update bid panel below
        */
        
        JPanel updateBidPanel = new JPanel();
        updateBidPanel.setLayout(null);
        frame.getContentPane().add(updateBidPanel);
        
        JLabel lblUpdateBidTitle = new JLabel("Update a bid");
        lblUpdateBidTitle.setFont(new Font("Tahoma", Font.BOLD, 21));
        lblUpdateBidTitle.setBounds(240, 50, 300, 31);
        updateBidPanel.add(lblUpdateBidTitle);
        
        JLabel lblNewPaperId = new JLabel("New paper ID");
        lblNewPaperId.setFont(new Font("Tahoma", Font.PLAIN, 14));
        lblNewPaperId.setBounds(50, 90, 150, 31);
        updateBidPanel.add(lblNewPaperId);
        
        JTextField txtNewPaperId = new JTextField();
        txtNewPaperId.setBounds(170, 95, 100, 22);
        txtNewPaperId.setColumns(10);
        updateBidPanel.add(txtNewPaperId);
        
        JButton btnConfirmUpdateBid = new JButton("Update");
        btnConfirmUpdateBid.setBounds(270, 93, 75, 25);
        updateBidPanel.add(btnConfirmUpdateBid);
        
        JButton btnUpdateBidBack = new JButton("Back");
        btnUpdateBidBack.setBounds(50, 20, 70, 35);
        updateBidPanel.add(btnUpdateBidBack);
        
        DefaultTableModel updateBidModel = new DefaultTableModel();
        updateBidModel.setColumnIdentifiers(viewBidsColumnNames);
        
        JTable updateBidTable = new JTable();
        updateBidTable.setModel(updateBidModel);
        updateBidTable.setDefaultEditor(Object.class, null);
        updateBidTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        updateBidTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        updateBidTable.setFillsViewportHeight(true);
        updateBidTable.getColumnModel().getColumn(1).setPreferredWidth(200);
        
        JScrollPane updateBidScroll = new JScrollPane(updateBidTable);
        updateBidScroll.setBounds(50, 150, 500, 250);
        updateBidScroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        updateBidScroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        updateBidPanel.add(updateBidScroll);
        
        btnUpdateBid.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e){
                homePage.setVisible(false);
                txtNewPaperId.setText("");
                updateBidModel.setRowCount(0);
                
                ReviewerUpdateBidController controller = new ReviewerUpdateBidController();
                ArrayList<ArrayList<String>> bidsList = controller.getBidsList(username);
                for(ArrayList<String> p : bidsList){
                    updateBidModel.addRow(new Object[]{p.get(0), p.get(1), p.get(2)});
                }
                updateBidPanel.setVisible(true);
            }
        });
        
        btnConfirmUpdateBid.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e){
                String newPaperId = txtNewPaperId.getText();
                
                ArrayList<String> bidInfo = new ArrayList<String>();
                int selectRow = updateBidTable.getSelectedRow();
                int col = 0;
                for (int i = 0; i < 3; i++) {
                    bidInfo.add((String) updateBidTable.getValueAt(selectRow, col));
                    col++;
                }
                
                ReviewerUpdateBidController controller = new ReviewerUpdateBidController();
                if(!controller.eligibleForUpdate(username, newPaperId)){
                    JOptionPane.showMessageDialog(null, "You have already placed a bid on this paper!", "Error", JOptionPane.ERROR_MESSAGE);
                } else{
                    controller.updateBid(username, bidInfo.get(0), newPaperId);
                    
                    updateBidModel.setRowCount(0);
                    ArrayList<ArrayList<String>> bidsList = controller.getBidsList(username);
                    for(ArrayList<String> p : bidsList){
                        updateBidModel.addRow(new Object[]{p.get(0), p.get(1), p.get(2)});
                    }
                }
                
            }
        });
        
        btnUpdateBidBack.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e){
                updateBidPanel.setVisible(false);
                homePage.setVisible(true);
            }
        });
        
        /*
            Set review limit panel below
        */
        
        JPanel setLimitPanel = new JPanel();
        setLimitPanel.setLayout(null);
        frame.getContentPane().add(setLimitPanel);
        
        JLabel lblSetLimitTitle = new JLabel("Set review limit");
        lblSetLimitTitle.setFont(new Font("Tahoma", Font.BOLD, 21));
        lblSetLimitTitle.setBounds(220, 50, 300, 31);
        setLimitPanel.add(lblSetLimitTitle);
        
        JLabel lblSetLimitUsername = new JLabel("Username");
        lblSetLimitUsername.setFont(new Font("Tahoma", Font.PLAIN, 14));
        lblSetLimitUsername.setBounds(190, 150, 150, 31);
        setLimitPanel.add(lblSetLimitUsername);
        
        JTextField txtSetLimitUsername = new JTextField();
        txtSetLimitUsername.setBounds(310, 155, 100, 22);
        txtSetLimitUsername.setColumns(10);
        txtSetLimitUsername.setEditable(false);
        setLimitPanel.add(txtSetLimitUsername);
        
        JLabel lblCurrentLimit = new JLabel("Current Limit ");
        lblCurrentLimit.setFont(new Font("Tahoma", Font.PLAIN, 14));
        lblCurrentLimit.setBounds(190, 200, 150, 31);
        setLimitPanel.add(lblCurrentLimit);
        
        JTextField txtCurrentLimit = new JTextField();
        txtCurrentLimit.setBounds(310, 205, 100, 22);
        txtCurrentLimit.setColumns(10);
        txtCurrentLimit.setEditable(false);
        setLimitPanel.add(txtCurrentLimit);
        
        JLabel lblNewLimit = new JLabel("Set a new limit  ");
        lblNewLimit.setFont(new Font("Tahoma", Font.PLAIN, 14));
        lblNewLimit.setBounds(190, 250, 150, 31);
        setLimitPanel.add(lblNewLimit);
        
        JTextField txtNewLimit = new JTextField();
        txtNewLimit.setBounds(310, 255, 100, 22);
        txtNewLimit.setColumns(10);
        setLimitPanel.add(txtNewLimit);
        
        JButton btnConfirmSetLimit = new JButton("Set");
        btnConfirmSetLimit.setBounds(323, 295, 75, 25);
        setLimitPanel.add(btnConfirmSetLimit);
        
        JButton btnSetLimitBack = new JButton("Back");
        btnSetLimitBack.setBounds(50, 20, 70, 35);
        setLimitPanel.add(btnSetLimitBack);
        
        btnSetReviewLimit.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e){
                homePage.setVisible(false);
                txtSetLimitUsername.setText(username);
                txtNewLimit.setText("");
                
                ReviewerSetLimitController controller = new ReviewerSetLimitController();
                txtCurrentLimit.setText(controller.getCurrentLimit(username));
                setLimitPanel.setVisible(true);
            }
        });
        
        btnConfirmSetLimit.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e){
                String newLimit = txtNewLimit.getText();
                
                ReviewerSetLimitController controller = new ReviewerSetLimitController();
                controller.setLimit(username, newLimit);
                txtCurrentLimit.setText(controller.getCurrentLimit(username));
                JOptionPane.showMessageDialog(btnConfirmSetLimit, "Limit successfully set!");
            }
        });
        
        btnSetLimitBack.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e){
                setLimitPanel.setVisible(false);
                homePage.setVisible(true);
            }
        });
        
        /*
            Review a paper panel below
        */
        
        JPanel reviewPaperPanel = new JPanel();
        reviewPaperPanel.setLayout(null);
        frame.getContentPane().add(reviewPaperPanel);
        
        JLabel lblReviewPaperTitle = new JLabel("Review a paper");
        lblReviewPaperTitle.setFont(new Font("Tahoma", Font.BOLD, 21));
        lblReviewPaperTitle.setBounds(220, 50, 300, 31);
        reviewPaperPanel.add(lblReviewPaperTitle);
        
        JLabel lblReviewPaperInstruction = new JLabel("Select a paper and click on the 'Select' button");
        lblReviewPaperInstruction.setFont(new Font("Tahoma", Font.PLAIN, 14));
        lblReviewPaperInstruction.setBounds(50, 100, 350, 31);
        reviewPaperPanel.add(lblReviewPaperInstruction);
        
        JButton btnConfirmReviewPaper = new JButton("Select");
        btnConfirmReviewPaper.setBounds(450, 400, 75, 35);
        reviewPaperPanel.add(btnConfirmReviewPaper);
        
        JButton btnReviewPaperBack = new JButton("Back");
        btnReviewPaperBack.setBounds(50, 20, 70, 35);
        reviewPaperPanel.add(btnReviewPaperBack);
        
        DefaultTableModel reviewPaperModel = new DefaultTableModel();
        reviewPaperModel.setColumnIdentifiers(viewBidsColumnNames);
        
        JTable reviewPaperTable = new JTable();
        reviewPaperTable.setModel(reviewPaperModel);
        reviewPaperTable.setDefaultEditor(Object.class, null);
        reviewPaperTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        reviewPaperTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        reviewPaperTable.setFillsViewportHeight(true);
        reviewPaperTable.getColumnModel().getColumn(1).setPreferredWidth(200);
        
        JScrollPane reviewPaperScroll = new JScrollPane(reviewPaperTable);
        reviewPaperScroll.setBounds(50, 140, 500, 250);
        reviewPaperScroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        reviewPaperScroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        reviewPaperPanel.add(reviewPaperScroll);
        
        JPanel rateAndCommentPanel = new JPanel();
        rateAndCommentPanel.setLayout(null);
        frame.getContentPane().add(rateAndCommentPanel);
        
        JLabel lblRateAndCommentTitle = new JLabel("Review a paper");
        lblRateAndCommentTitle.setFont(new Font("Tahoma", Font.BOLD, 21));
        lblRateAndCommentTitle.setBounds(220, 50, 300, 31);
        rateAndCommentPanel.add(lblRateAndCommentTitle);
        
        JButton btnRateAndCommentBack = new JButton("Back");
        btnRateAndCommentBack.setBounds(50, 20, 70, 35);
        rateAndCommentPanel.add(btnRateAndCommentBack);
        
        JLabel lblRateAndCommentInstruction = new JLabel("Choose a rating and fill in your comment (optional)");
        lblRateAndCommentInstruction.setFont(new Font("Tahoma", Font.PLAIN, 14));
        lblRateAndCommentInstruction.setBounds(50, 100, 350, 31);
        rateAndCommentPanel.add(lblRateAndCommentInstruction);
        
        JLabel lblSelectRating = new JLabel("Rating");
        lblSelectRating.setFont(new Font("Tahoma", Font.PLAIN, 14));
        lblSelectRating.setBounds(50, 140, 150, 31);
        rateAndCommentPanel.add(lblSelectRating);
        
        JComboBox<Object> ratingSelectBox = new JComboBox<Object>(new String[] {"-3", "-2", "-1", "0", "1", "2", "3"});
        ratingSelectBox.setToolTipText("");
        ratingSelectBox.setBounds(170, 145, 100, 22);
        rateAndCommentPanel.add(ratingSelectBox);
        
        JLabel lblReviewPaperComment = new JLabel("Add a comment ");
        lblReviewPaperComment.setFont(new Font("Tahoma", Font.PLAIN, 14));
        lblReviewPaperComment.setBounds(50, 180, 150, 31);
        rateAndCommentPanel.add(lblReviewPaperComment);
        
        JTextArea txtReviewPaperComment = new JTextArea();
        txtReviewPaperComment.setBounds(50, 215, 500, 80);
        txtReviewPaperComment.setLineWrap(true);
        rateAndCommentPanel.add(txtReviewPaperComment);
        
        JButton btnConfirmRatePaper = new JButton("Submit");
        btnConfirmRatePaper.setBounds(450, 300, 75, 35);
        rateAndCommentPanel.add(btnConfirmRatePaper);
        
        btnReviewPaper.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e){
                homePage.setVisible(false);
                reviewPaperModel.setRowCount(0);
                
                ReviewerReviewPaperController controller = new ReviewerReviewPaperController();
                ArrayList<ArrayList<String>> reviewingList = controller.getReviewingList(username);
                for(ArrayList<String> p : reviewingList){
                    reviewPaperModel.addRow(new Object[]{p.get(0), p.get(1), p.get(2)});
                }
                reviewPaperPanel.setVisible(true);
            }
        });
        
        
        btnConfirmReviewPaper.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e){
                ArrayList<String> reviewInfo = new ArrayList<String>();
                int selectRow = reviewPaperTable.getSelectedRow();
                int col = 0;
                for (int i = 0; i < 3; i++) {
                    reviewInfo.add((String) reviewPaperTable.getValueAt(selectRow, col));
                    col++;
                }
                currReviewPaper = reviewInfo.get(0);
                
                reviewPaperPanel.setVisible(false);
                rateAndCommentPanel.setVisible(true);
                txtReviewPaperComment.setText("");
                ratingSelectBox.setSelectedIndex(3);
                
            }
        });
        
        btnReviewPaperBack.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e){
                reviewPaperPanel.setVisible(false);
                homePage.setVisible(true);
            }
        });
        
        btnRateAndCommentBack.addActionListener(new ActionListener()
        {
           public void actionPerformed(ActionEvent e){
               rateAndCommentPanel.setVisible(false);
               reviewPaperPanel.setVisible(true);
           }
        });
        
        btnConfirmRatePaper.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e){
                String rating = ratingSelectBox.getSelectedItem().toString();
                String comment = txtReviewPaperComment.getText();
                
                ReviewerReviewPaperController controller = new ReviewerReviewPaperController();
                controller.submitReview(username, currReviewPaper, rating, comment);
                JOptionPane.showMessageDialog(btnConfirmRatePaper, "Review submitted!");
                
                homePage.setVisible(true);
                rateAndCommentPanel.setVisible(false);
            }
        });
        
        /*
            View other reviewer's rating panel below
        */
        
        JPanel viewOtherRatingPanel = new JPanel();
        viewOtherRatingPanel.setLayout(null);
        frame.getContentPane().add(viewOtherRatingPanel);
        
        JLabel lblViewOtherRatingTitle = new JLabel("View other reviewer's rating");
        lblViewOtherRatingTitle.setFont(new Font("Tahoma", Font.BOLD, 21));
        lblViewOtherRatingTitle.setBounds(165, 50, 300, 31);
        viewOtherRatingPanel.add(lblViewOtherRatingTitle);
        
        JLabel lblViewOtherRatingResultInstruction = new JLabel("Select a paper and click on the 'Select' button");
        lblViewOtherRatingResultInstruction.setFont(new Font("Tahoma", Font.PLAIN, 14));
        lblViewOtherRatingResultInstruction.setBounds(50, 100, 350, 31);
        viewOtherRatingPanel.add(lblViewOtherRatingResultInstruction);
        
        JButton btnViewOtherRatingBack = new JButton("Back");
        btnViewOtherRatingBack.setBounds(50, 20, 70, 35);
        viewOtherRatingPanel.add(btnViewOtherRatingBack);
        
        DefaultTableModel viewOtherRatingModel = new DefaultTableModel();
        viewOtherRatingModel.setColumnIdentifiers(viewBidsColumnNames);
        
        JTable viewOtherRatingTable = new JTable();
        viewOtherRatingTable.setModel(viewOtherRatingModel);
        viewOtherRatingTable.setDefaultEditor(Object.class, null);
        viewOtherRatingTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        viewOtherRatingTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        viewOtherRatingTable.setFillsViewportHeight(true);
        viewOtherRatingTable.getColumnModel().getColumn(1).setPreferredWidth(200);
        
        JScrollPane viewOtherRatingScroll = new JScrollPane(viewOtherRatingTable);
        viewOtherRatingScroll.setBounds(50, 140, 500, 250);
        viewOtherRatingScroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        viewOtherRatingScroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        viewOtherRatingPanel.add(viewOtherRatingScroll);
        
        JButton btnConfirmViewOtherRating = new JButton("Select");
        btnConfirmViewOtherRating.setBounds(450, 400, 75, 35);
        viewOtherRatingPanel.add(btnConfirmViewOtherRating);
        
        JPanel viewOtherRatingResultPanel = new JPanel();
        viewOtherRatingResultPanel.setLayout(null);
        frame.getContentPane().add(viewOtherRatingResultPanel);
        
        JLabel lblViewOtherRatingResultTitle = new JLabel("View other reviewer's rating");
        lblViewOtherRatingResultTitle.setFont(new Font("Tahoma", Font.BOLD, 21));
        lblViewOtherRatingResultTitle.setBounds(165, 50, 300, 31);
        viewOtherRatingResultPanel.add(lblViewOtherRatingResultTitle);
        
        JLabel lblViewOtherRatingInstruction = new JLabel("The table below shows other reviewers' review of the same paper.");
        lblViewOtherRatingInstruction.setFont(new Font("Tahoma", Font.PLAIN, 14));
        lblViewOtherRatingInstruction.setBounds(50, 100, 450, 31);
        viewOtherRatingResultPanel.add(lblViewOtherRatingInstruction);
        
        JButton btnViewOtherRatingResultBack = new JButton("Back");
        btnViewOtherRatingResultBack.setBounds(50, 20, 70, 35);
        viewOtherRatingResultPanel.add(btnViewOtherRatingResultBack);
        
        DefaultTableModel viewOtherRatingResultModel = new DefaultTableModel();
        viewOtherRatingResultModel.setColumnIdentifiers(viewRatingColumnNames);
        
        JTable viewOtherRatingResultTable = new JTable();
        viewOtherRatingResultTable.setModel(viewOtherRatingResultModel);
        viewOtherRatingResultTable.setDefaultEditor(Object.class, null);
        viewOtherRatingResultTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        viewOtherRatingResultTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        viewOtherRatingResultTable.setFillsViewportHeight(true);
        viewOtherRatingResultTable.getColumnModel().getColumn(2).setPreferredWidth(300);
        
        JScrollPane viewOtherRatingResultScroll = new JScrollPane(viewOtherRatingResultTable);
        viewOtherRatingResultScroll.setBounds(50, 140, 500, 250);
        viewOtherRatingResultScroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        viewOtherRatingResultScroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        viewOtherRatingResultPanel.add(viewOtherRatingResultScroll);
        
        btnViewOtherRating.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e){
                homePage.setVisible(false);
                viewOtherRatingModel.setRowCount(0);
                
                ReviewerViewOtherRatingController controller = new ReviewerViewOtherRatingController();
                ArrayList<ArrayList<String>> reviewedList = controller.getReviewedList(username);
                for(ArrayList<String> p : reviewedList){
                    viewOtherRatingModel.addRow(new Object[]{p.get(0), p.get(1), p.get(2)});
                }
                viewOtherRatingPanel.setVisible(true);
            }
        });
        
        btnViewOtherRatingBack.addActionListener(new ActionListener()
        {
           public void actionPerformed(ActionEvent e){
               viewOtherRatingPanel.setVisible(false);
               homePage.setVisible(true);
           }
        });
        
        btnConfirmViewOtherRating.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e){
                ArrayList<String> reviewInfo = new ArrayList<String>();
                int selectRow = viewOtherRatingTable.getSelectedRow();
                int col = 0;
                for (int i = 0; i < 3; i++) {
                    reviewInfo.add((String) viewOtherRatingTable.getValueAt(selectRow, col));
                    col++;
                }
                currReviewPaper = reviewInfo.get(0);
                
                ReviewerViewOtherRatingController controller = new ReviewerViewOtherRatingController();
                if(controller.otherReviewerIsEmpty(currReviewPaper)){
                    JOptionPane.showMessageDialog(null, "No record found!", "Error", JOptionPane.ERROR_MESSAGE);
                } else{
                    viewOtherRatingResultModel.setRowCount(0);
                    ArrayList<ArrayList<String>> reviewList = controller.getOtherReviews(username, currReviewPaper);
                    for(ArrayList<String> p : reviewList){
                        viewOtherRatingResultModel.addRow(new Object[]{p.get(0), p.get(1), p.get(2)});
                    }
                    viewOtherRatingPanel.setVisible(false);
                    viewOtherRatingResultPanel.setVisible(true);
                }
                
                
            }
        });
        
        btnViewOtherRatingResultBack.addActionListener(new ActionListener()
        {
           public void actionPerformed(ActionEvent e){
               viewOtherRatingResultPanel.setVisible(false);
               viewOtherRatingPanel.setVisible(true);
           }
        });
        
        /*
            Update rating panel below
        */
        
        JPanel updateRatingPanel = new JPanel();
        updateRatingPanel.setLayout(null);
        frame.getContentPane().add(updateRatingPanel);
        
        JLabel lblUpdateRatingTitle = new JLabel("Update a rating");
        lblUpdateRatingTitle.setFont(new Font("Tahoma", Font.BOLD, 21));
        lblUpdateRatingTitle.setBounds(220, 50, 300, 31);
        updateRatingPanel.add(lblUpdateRatingTitle);
        
        JLabel lblNewUpdateRating = new JLabel("New rating");
        lblNewUpdateRating.setFont(new Font("Tahoma", Font.PLAIN, 14));
        lblNewUpdateRating.setBounds(50, 90, 150, 31);
        updateRatingPanel.add(lblNewUpdateRating);
        
        JComboBox<Object> updateRatingSelectBox = new JComboBox<Object>(new String[] {"-3", "-2", "-1", "0", "1", "2", "3"});
        updateRatingSelectBox.setToolTipText("");
        updateRatingSelectBox.setBounds(170, 95, 100,  22);
        updateRatingPanel.add(updateRatingSelectBox);
        
        JButton btnConfirmUpdateRating = new JButton("Update");
        btnConfirmUpdateRating.setBounds(270, 93, 75, 25);
        updateRatingPanel.add(btnConfirmUpdateRating);
        
        JButton btnUpdateRatingBack = new JButton("Back");
        btnUpdateRatingBack.setBounds(50, 20, 70, 35);
        updateRatingPanel.add(btnUpdateRatingBack);
        
        DefaultTableModel updateRatingModel = new DefaultTableModel();
        updateRatingModel.setColumnIdentifiers(updateRatingColumnNames);
        
        JTable updateRatingTable = new JTable();
        updateRatingTable.setModel(updateRatingModel);
        updateRatingTable.setDefaultEditor(Object.class, null);
        updateRatingTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        updateRatingTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        updateRatingTable.setFillsViewportHeight(true);
        updateRatingTable.getColumnModel().getColumn(1).setPreferredWidth(200);
        
        JScrollPane updateRatingScroll = new JScrollPane(updateRatingTable);
        updateRatingScroll.setBounds(50, 150, 500, 250);
        updateRatingScroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        updateRatingScroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        updateRatingPanel.add(updateRatingScroll);
        
        btnUpdateRating.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e){
                homePage.setVisible(false);
                updateRatingSelectBox.setSelectedIndex(3);
                updateRatingModel.setRowCount(0);
                
                ReviewerUpdateRatingController controller = new ReviewerUpdateRatingController();
                ArrayList<ArrayList<String>> pendingReviewedList = controller.getPendingReviewedList(username);
                for(ArrayList<String> p : pendingReviewedList){
                    updateRatingModel.addRow(new Object[]{p.get(0), p.get(1), p.get(2)});
                }
                updateRatingPanel.setVisible(true);
            }
        });
        
        btnUpdateRatingBack.addActionListener(new ActionListener()
        {
           public void actionPerformed(ActionEvent e){
               updateRatingPanel.setVisible(false);
               homePage.setVisible(true);
           }
        });
        
        btnConfirmUpdateRating.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e){
                ArrayList<String> reviewInfo = new ArrayList<String>();
                int selectRow = updateRatingTable.getSelectedRow();
                int col = 0;
                for (int i = 0; i < 3; i++) {
                    reviewInfo.add((String) updateRatingTable.getValueAt(selectRow, col));
                    col++;
                }
                
                currReviewPaper = reviewInfo.get(0);
                String rating = updateRatingSelectBox.getSelectedItem().toString();
                ReviewerUpdateRatingController controller = new ReviewerUpdateRatingController();
                controller.updateRating(username, currReviewPaper, rating);
                JOptionPane.showMessageDialog(btnConfirmUpdateRating, "Review successfully updated!");

                updateRatingModel.setRowCount(0);
                ArrayList<ArrayList<String>> pendingReviewedList = controller.getPendingReviewedList(username);
                for(ArrayList<String> p : pendingReviewedList){
                    updateRatingModel.addRow(new Object[]{p.get(0), p.get(1), p.get(2)});
                }
                
            }
        });
        
    }
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
