
package helloworld;

/**
 * @author guihendro
 */

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;

public class ConferenceChairGUI extends javax.swing.JFrame {

    private JFrame frame;

    /**
     * Creates new form ConferenceChairGUI
     */

    // Constructor
    public ConferenceChairGUI() {
        displayConferenceChairGUI();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */

    private void displayConferenceChairGUI() {
        // Set up frame
        frame = new JFrame("Conference Chair");
        frame.setResizable(true);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(100, 100, 600, 500);
        frame.getContentPane().setLayout(new CardLayout(0, 0));
//        frame.setLayout(new BorderLayout());
        frame.setVisible(true);

        // Initialize title label
        JLabel lblTitle = createTitleLabel();

        // Initialize logout button
        JButton btnLogout = new JButton("Logout");
        btnLogout.setBounds(375, 50, 150, 31);

        JPanel homePage = createPanelInFrame(frame);
        homePage.setVisible(true);
//        homePage.add(lblTitle);
        homePage.add(btnLogout);
        homePage.add(lblTitle);

        // Initialize allocate paper button
        JButton btnAllocatePaper = new JButton("Allocate papers");
        btnAllocatePaper.setBounds(50, 150, 150, 31);
        homePage.add(btnAllocatePaper);

        // Initialize view paper reviews button
        JButton btnViewPaperReview = new JButton("View paper reviews");
        btnViewPaperReview.setBounds(50, 200, 150, 31);
        homePage.add(btnViewPaperReview);

        // Initialize approve a paper button
        JButton btnAuto = new JButton("Auto allocation");
        btnAuto.setBounds(50, 250, 150, 31);
        homePage.add(btnAuto);

        // Initialize view approval history button
        JButton btnViewApprovalHistory = new JButton("View history");
        btnViewApprovalHistory.setBounds(50, 300, 150, 31);
        homePage.add(btnViewApprovalHistory);

        // Initialize allocate paper label
        JLabel lblAllocatePaper = new JLabel("Allocate a paper to a reviewer.");
        lblAllocatePaper.setFont(new Font("Tahoma", Font.PLAIN, 14));
        lblAllocatePaper.setBounds(230, 150, 300, 31);
        homePage.add(lblAllocatePaper);

        // Initialize view paper label
        JLabel lblViewPaperReview = new JLabel("Assess a reviewed paper.");
        lblViewPaperReview.setFont(new Font("Tahoma", Font.PLAIN, 14));
        lblViewPaperReview.setBounds(230, 200, 300, 31);
        homePage.add(lblViewPaperReview);

        // Initialize approve paper label
        JLabel lblAuto = new JLabel("Auto allocate all the papers to reviewers.");
        lblAuto.setFont(new Font("Tahoma", Font.PLAIN, 14));
        lblAuto.setBounds(230, 250, 300, 31);
        homePage.add(lblAuto);

        // Initialize view approval history label
        JLabel lblViewApprovalHistory = new JLabel("View your paper acceptance history.");
        lblViewApprovalHistory.setFont(new Font("Tahoma", Font.PLAIN, 14));
        lblViewApprovalHistory.setBounds(230, 300, 300, 31);
        homePage.add(lblViewApprovalHistory);

        JPanel allocatePage = createPanelInFrame(frame);
        JLabel lblCreateTitle = createTitleLabel();
        allocatePage.add(lblCreateTitle);

        JPanel viewPaperPage = createPanelInFrame(frame);
        JLabel lblView = createTitleLabel();
        viewPaperPage.add(lblView);

        JLabel lblPapersView = new JLabel("Papers: ");
        lblPapersView.setFont(new Font("Tahoma", Font.BOLD, 14));
        lblPapersView.setBounds(30, 90, 100, 20);
        viewPaperPage.add(lblPapersView);

        JLabel lblReviewerView = new JLabel("Current reviews: ");
        lblReviewerView.setFont(new Font("Tahoma", Font.BOLD, 14));
        lblReviewerView.setBounds(300, 90, 150, 20);
        viewPaperPage.add(lblReviewerView);

        JLabel lblReviewerList = new JLabel("Reviewers: ");
        lblReviewerList.setFont(new Font("Tahoma", Font.BOLD, 14));
        lblReviewerList.setBounds(30, 90, 100, 20);
        allocatePage.add(lblReviewerList);

        JLabel lblPapersList = new JLabel("Papers: ");
        lblPapersList.setFont(new Font("Tahoma", Font.BOLD, 14));
        lblPapersList.setBounds(300, 90, 100, 20);
        allocatePage.add(lblPapersList);

        DefaultTableModel dtm_reviewer;

        JTable table_reviewer;
        String[] columnNames = new String[]{"ID", "Name", "current", "Max"};
        dtm_reviewer = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
//        Object[] reviewersList = new Object[4];
        getReviewerInfo(dtm_reviewer);
        table_reviewer = new JTable(dtm_reviewer);
        table_reviewer.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
//        table_reviewer.setDefaultEditor(Object.class, null);
//        table_reviewer.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        table_reviewer.getColumnModel().getColumn(1).setMinWidth(30);
        table_reviewer.getColumnModel().getColumn(0).setMinWidth(2);
//        table_reviewer.getColumnModel().getColumn(1).setMinWidth(50);
        table_reviewer.getTableHeader().setReorderingAllowed(false);
        JScrollPane jsp_reviewers = new JScrollPane(table_reviewer);
        jsp_reviewers.setBounds(30, 110, 210, 300);
        jsp_reviewers.setVisible(true);
        allocatePage.add(jsp_reviewers);


        DefaultTableModel dtm_paper;
        JTable table_paper = new JTable();
        String[] columnNames_paper = new String[]{"ID", "Name", "Review", "Acceptance"};
        dtm_paper = new DefaultTableModel(columnNames_paper, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        JScrollPane jsp_papers = new JScrollPane(table_paper);
        jsp_papers.setBounds(260, 110, 300, 300);
        jsp_papers.setVisible(true);
        allocatePage.add(jsp_papers);

        JButton btnAccept = new JButton("Accept");
        btnAccept.setBounds(300, 410, 75, 20);
//        JButton btnReject = new JButton("Reject");
//        btnReject.setBounds(380, 410, 75, 20);
        JButton btnDelete = new JButton("Delete");
        btnDelete.setBounds(460, 410, 75, 20);
        JButton btnBack = createBackButton();


        allocatePage.add(btnAccept);
        allocatePage.add(btnDelete);
//        allocatePage.add(btnReject);
        allocatePage.add(btnBack);

        DefaultTableModel dtm_viewPaper;
        String[] columnNames_viewPaper = new String[]{"ID", "Name", "Status"};
        dtm_viewPaper = new DefaultTableModel(columnNames_viewPaper, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        try {
            String showPaperSQL = "SELECT paperID, name, acceptance_status FROM papers";
            PreparedStatement viewPaperStm = DatabaseConnection.getConnection().prepareStatement(showPaperSQL);
            ResultSet viewRS = viewPaperStm.executeQuery();
            while (viewRS.next()) {

                int paperID = viewRS.getInt("paperID");
                String paperName = viewRS.getString("name");
                String paperStatus = viewRS.getString("acceptance_status");
                String[] data = {String.valueOf(paperID), paperName, paperStatus};
                dtm_viewPaper.addRow(data);

            }
        } catch (SQLException throwables) {
            throwables.printStackTrace();
        }

        JTable table_ViewPaper = new JTable(dtm_viewPaper);
        table_ViewPaper.getTableHeader().setReorderingAllowed(false);
        table_ViewPaper.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
//        table_ViewPaper.getColumnModel().getColumn(2).setMinWidth(2);
//        table_ViewPaper.getColumnModel().getColumn(0).setMinWidth(2);
        JScrollPane jsp_ViewPapers = new JScrollPane(table_ViewPaper);
        jsp_ViewPapers.setBounds(30, 110, 210, 290);
        jsp_ViewPapers.setVisible(true);
        viewPaperPage.add(jsp_ViewPapers);

        JButton viewPaperBack = createBackButton();
        viewPaperPage.add(viewPaperBack);

        DefaultTableModel dtm_viewReviewers;
        String[] columnNames_viewReviewers = new String[]{"ID", "Name", "Rating", "Status"};
        dtm_viewReviewers = new DefaultTableModel(columnNames_viewReviewers, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        JTable table_viewReviewers = new JTable(dtm_viewReviewers);
        table_viewReviewers.getTableHeader().setReorderingAllowed(false);
//        table_viewReviewers.getColumnModel().getColumn(2).setMinWidth(2);
//        table_viewReviewers.getColumnModel().getColumn(0).setMinWidth(2);
        JScrollPane jsp_viewReviewers = new JScrollPane(table_viewReviewers);
        jsp_viewReviewers.setBounds(260, 110, 300, 110);
        jsp_viewReviewers.setVisible(true);
        viewPaperPage.add(jsp_viewReviewers);
        //other bidders
        JLabel lblBidders = new JLabel("Other Bidders: ");
        lblBidders.setFont(new Font("Tahoma", Font.BOLD, 14));
        lblBidders.setBounds(300, 225, 210, 20);
        viewPaperPage.add(lblBidders);

        DefaultTableModel dtm_bidders;
        String[] columnNames_bidders = new String[]{"ID", "Name", "current", "Max"};
        dtm_bidders = new DefaultTableModel(columnNames_bidders, 0) {

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        JTable table_bidders = new JTable(dtm_bidders);
        table_bidders.getTableHeader().setReorderingAllowed(false);
        JScrollPane jsp_bidders = new JScrollPane(table_bidders);
        jsp_bidders.setBounds(260, 250, 300, 150);
        jsp_bidders.setVisible(true);
        viewPaperPage.add(jsp_bidders);

        JButton chooseBidder = new JButton("Allocate");
        chooseBidder.setBounds(350, 410, 100, 20);
        viewPaperPage.add(chooseBidder);

        JButton btnModify = new JButton("Re-Allocate");
        btnModify.setBounds(450, 410, 100, 20);
        viewPaperPage.add(btnModify);

        JButton btnAcceptPaper = new JButton("Accept");
        JButton btnRejectPaper = new JButton("Reject");
        btnAcceptPaper.setBounds(30, 410, 75, 20);
        btnRejectPaper.setBounds(110, 410, 75, 20);
        viewPaperPage.add(btnAcceptPaper);
        viewPaperPage.add(btnRejectPaper);

        JPanel viewHistoryPage = createPanelInFrame(frame);
        JLabel lblHistory = createTitleLabel();
        viewHistoryPage.add(lblHistory);

        JButton historyBack = createBackButton();
        viewHistoryPage.add(historyBack);

        btnModify.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int reviewerRow = table_viewReviewers.getSelectedRow();
                int bidderRow = table_bidders.getSelectedRow();
                int paperRow = table_ViewPaper.getSelectedRow();
                if (reviewerRow == -1 || bidderRow == -1 || paperRow == -1) {
//                    JOptionPane.showMessageDialog(viewPaperPage, "Make a selection first!!", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                int min = Integer.parseInt(table_bidders.getValueAt(bidderRow, 2).toString());
                int max = Integer.parseInt(table_bidders.getValueAt(bidderRow, 3).toString());
                if (min >= max) {
//                    JOptionPane.showMessageDialog(viewPaperPage, "This bidder already got enough papers!!", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                int paperID = Integer.parseInt(table_ViewPaper.getValueAt(paperRow, 0).toString());
                int reviewerID = Integer.parseInt(table_viewReviewers.getValueAt(reviewerRow, 0).toString());
                int bidderID = Integer.parseInt(table_bidders.getValueAt(bidderRow, 0).toString());
                String bidderName = table_bidders.getValueAt(bidderRow, 1).toString();
                String[] bidder = {String.valueOf(bidderID), bidderName, "","REVIEWING"};
                ///
                ConferenceChairModifyController controller = new ConferenceChairModifyController();
                controller.modify(bidderID, reviewerID, paperID);
                dtm_bidders.removeRow(bidderRow);
                dtm_viewReviewers.removeRow(reviewerRow);
                dtm_viewReviewers.addRow(bidder);
            }
        });


        historyBack.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                homePage.setVisible(true);
                viewHistoryPage.setVisible(false);
            }
        });

        String[] history_columns = {"ID", "Name", "Acceptance Status"};
        DefaultTableModel dtm_history = new DefaultTableModel(history_columns, 0) {

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        JTable table_history = new JTable(dtm_history);
        table_history.getTableHeader().setReorderingAllowed(false);
        JScrollPane jsp_history = new JScrollPane(table_history);
        jsp_history.setBounds(30, 80, 500, 300);
        jsp_history.setVisible(true);
        viewHistoryPage.add(jsp_history);

        btnViewApprovalHistory.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                homePage.setVisible(false);
                dtm_history.setRowCount(0);
                ConferenceChairViewHistoryController controller = new ConferenceChairViewHistoryController();
                ArrayList<String[]> results = controller.viewApprovalHistory();
                for (String[] result : results) {
                    dtm_history.addRow(result);
                }
                viewHistoryPage.setVisible(true);
            }
        });

        btnAcceptPaper.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int row = table_ViewPaper.getSelectedRow();
                if (row == -1) {
//                    JOptionPane.showMessageDialog(viewPaperPage, "Please select a paper first!!", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if (!table_ViewPaper.getValueAt(row, 2).toString().equalsIgnoreCase("pending")) {
//                    JOptionPane.showMessageDialog(viewPaperPage, "Can't accept this paper!!", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                int id = Integer.parseInt(table_ViewPaper.getValueAt(row, 0).toString());

                table_ViewPaper.setValueAt("ACCEPTED", row, 2);
                ConferenceChairAcceptRejectController controller = new ConferenceChairAcceptRejectController();
                controller.acceptPaper(id);
            }
        });

        btnRejectPaper.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int row = table_ViewPaper.getSelectedRow();
                if (row == -1) {
//                    JOptionPane.showMessageDialog(viewPaperPage, "Please select a paper first!!", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if (!table_ViewPaper.getValueAt(row, 2).toString().equalsIgnoreCase("pending")) {
//                    JOptionPane.showMessageDialog(viewPaperPage, "Can't reject this paper!!", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                int id = Integer.parseInt(table_ViewPaper.getValueAt(row, 0).toString());
                table_ViewPaper.setValueAt("REJECTED", row, 2);
                ConferenceChairAcceptRejectController controller = new ConferenceChairAcceptRejectController();
                controller.rejectPaper(id);
            }

        });

        chooseBidder.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int bidderRow = table_bidders.getSelectedRow();
                int paperRow = table_ViewPaper.getSelectedRow();

                if (bidderRow == -1 || paperRow == -1) {
//                    JOptionPane.showMessageDialog(viewPaperPage, "Please make a selection first!!!!", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                int max = Integer.parseInt(table_bidders.getValueAt(bidderRow, 3).toString());
                int curr = Integer.parseInt(table_bidders.getValueAt(bidderRow, 2).toString());
                if (curr >= max) {
//                    JOptionPane.showMessageDialog(viewPaperPage, "This reviewer already got enough papers!", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                int paperID = Integer.parseInt(table_ViewPaper.getValueAt(paperRow, 0).toString());
                int bidderID = Integer.parseInt(table_bidders.getValueAt(bidderRow, 0).toString());
                String bidderName = table_bidders.getValueAt(bidderRow, 1).toString();

                String[] newReviewer = {String.valueOf(bidderID), bidderName, "", "REVIEWING"};
                dtm_bidders.removeRow(bidderRow);
                dtm_viewReviewers.addRow(newReviewer);

                ConferenceChairAllocateController controller = new ConferenceChairAllocateController();
                controller.allocateBidders(paperID, bidderID);

            }
        });

        viewPaperBack.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                homePage.setVisible(true);
                viewPaperPage.setVisible(false);

            }
        });

        btnViewPaperReview.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                homePage.setVisible(false);
                viewPaperPage.setVisible(true);
            }
        });

        btnAuto.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                ConferenceChairAutoAllocateController controller = new ConferenceChairAutoAllocateController();
                JOptionPane.showMessageDialog(frame, "Papers have been auto allocated.", "Info", JOptionPane.INFORMATION_MESSAGE);
                controller.autoAllocate();
            }
        });


        table_ViewPaper.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e);
                dtm_viewReviewers.setRowCount(0);
                dtm_bidders.setRowCount(0);
                int row = table_ViewPaper.getSelectedRow();
                if (row == -1) {
//                    JOptionPane.showMessageDialog(table_reviewer, "Please select a paper first!!!!", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                int paperID = Integer.parseInt(table_ViewPaper.getValueAt(row, 0).toString());

                ConferenceChairDisplayPaperInfoController controller = new ConferenceChairDisplayPaperInfoController();
                controller.displayPaperInfo(paperID, dtm_viewReviewers, dtm_bidders);

                table_viewReviewers.setModel(dtm_viewReviewers);
                table_viewReviewers.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
//        table.setDefaultEditor(Object.class, null);
//        table_reviewer.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
                table_viewReviewers.getColumnModel().getColumn(1).setMinWidth(40);
                table_viewReviewers.getColumnModel().getColumn(0).setMinWidth(2);
//        table_reviewer.getColumnModel().getColumn(1).setMinWidth(50);
                table_viewReviewers.getTableHeader().setReorderingAllowed(false);

                table_bidders.setModel(dtm_bidders);
                table_bidders.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                table_bidders.getColumnModel().getColumn(1).setMinWidth(40);
                table_bidders.getColumnModel().getColumn(0).setMinWidth(2);

                table_bidders.getTableHeader().setReorderingAllowed(false);

            }
        });

        table_reviewer.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e);
                int viewRow = table_reviewer.getSelectedRow();
                if (viewRow == -1) {
//                    JOptionPane.showMessageDialog(table_reviewer, "Please select a reviewer first!!!!", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                String[] chooser = getSelectedRow(table_reviewer, viewRow);
                int id = Integer.parseInt(chooser[0]);
//                getPaperTable(table_paper, dtm_paper, id);
                dtm_paper.setRowCount(0);
                //setting data
                try {
                    String getDataSQL = "SELECT papers.paperID, papers.name, papers.acceptance_status, reviews.review_status \n" +
                            "from papers JOIN reviews on reviews.paperID = papers.paperID \n" +
                            "WHERE reviews.reviewerID = ? and acceptance_status = \"PENDING\";";
                    PreparedStatement getDataStm = DatabaseConnection.getConnection().prepareStatement(getDataSQL);
                    getDataStm.setInt(1, id);//*
//                    System.out.println(id);
                    ResultSet getDataRs = getDataStm.executeQuery();
//            getDataRs.beforeFirst();
                    while (getDataRs.next()) {
                        int ID = getDataRs.getInt("paperID");
                        String name = getDataRs.getString("name");
                        String review_status = getDataRs.getString("review_status");
                        String acceptance_status = getDataRs.getString("acceptance_status");
                        String[] data = {String.valueOf(ID), name, review_status, acceptance_status};

//                papers.add(data);
                        dtm_paper.addRow(data);
                    }
                } catch (SQLException throwables) {
                    throwables.printStackTrace();
                }


                table_paper.setModel(dtm_paper);
                table_paper.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
//        table.setDefaultEditor(Object.class, null);
//        table_reviewer.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
                table_paper.getColumnModel().getColumn(1).setMinWidth(40);
                table_paper.getColumnModel().getColumn(0).setMinWidth(2);
//        table_reviewer.getColumnModel().getColumn(1).setMinWidth(50);
                table_paper.getTableHeader().setReorderingAllowed(false);
//        return table;
            }
        });

        btnAccept.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int paperRow = table_paper.getSelectedRow();
                if (paperRow == -1) {
//                    JOptionPane.showMessageDialog(frame, "Please select a paper first!!!!", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                String[] paper = getSelectedRow(table_paper, paperRow);
                int reviewRow = table_reviewer.getSelectedRow();
                if (reviewRow == -1) {
//                    JOptionPane.showMessageDialog(frame, "Please select a reviewer first!!!!", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                String[] reviewer = getSelectedRow(table_reviewer, reviewRow);
                if (!paper[2].equalsIgnoreCase("BIDDING")) {
//                    JOptionPane.showMessageDialog(frame, "This paper has been allocated already.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                int limit = Integer.parseInt(reviewer[3]);
                int curr = Integer.parseInt(reviewer[2]);

                if (curr >= limit) {
//                    JOptionPane.showMessageDialog(frame, "This reviewer already got enough papers!", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                ConferenceChairAllocateController ac = new ConferenceChairAllocateController();
                ac.allocatePaper(paper, reviewer);
                table_paper.setValueAt("REVIEWING", paperRow, 2);
                curr = Integer.parseInt(reviewer[2]);
                curr++;
                table_reviewer.setValueAt(curr, reviewRow, 2);


            }
        });

        btnDelete.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int paperRow = table_paper.getSelectedRow();
                if (paperRow == -1) {
//                    JOptionPane.showMessageDialog(frame, "Please select a paper first!!!!", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                int reviewRow = table_reviewer.getSelectedRow();
                if (reviewRow == -1) {
//                    JOptionPane.showMessageDialog(frame, "Please select a reviewer first!!!!", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                String[] reviewer = getSelectedRow(table_reviewer, reviewRow);
                String[] paper = getSelectedRow(table_paper, paperRow);
                if (paper[2].equalsIgnoreCase("BIDDING")) {
//                    JOptionPane.showMessageDialog(frame, "This paper hasn't been allocated yet.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                ConferenceChairDeleteController controller = new ConferenceChairDeleteController();
                controller.delete(paper);
                int curr = Integer.parseInt(reviewer[2]);
                curr--;
                if (curr<0)
                    curr =0;
                table_reviewer.setValueAt(curr, reviewRow, 2);
                dtm_paper.removeRow(paperRow);

            }
        });


        btnBack.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                allocatePage.setVisible(false);
                homePage.setVisible(true);
            }
        });


        btnAllocatePaper.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                homePage.setVisible(false);
                allocatePage.setVisible(true);
                dtm_reviewer.setRowCount(0);
                getReviewerInfo(dtm_reviewer);
            }
        });

        // Add event to logout button
        btnLogout.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                LogoutController controller = new LogoutController();
                controller.Logout(frame,btnLogout);
            }
        });
    }




    public JPanel createPanelInFrame(JFrame frame) {
        JPanel panel = new JPanel();
        frame.getContentPane().add(panel);
        panel.setLayout(null);
        panel.setVisible(false);
        return panel;
    }


    public JLabel createTitleLabel() {
        JLabel lblTitle = new JLabel("Welcome Conference Chair!");
        lblTitle.setFont(new Font("Tahoma", Font.BOLD, 21));
        lblTitle.setBounds(50, 50, 300, 31);
        return lblTitle;
    }

    public JButton createBackButton() {
        JButton btnBack = new JButton("Back to homepage");
        btnBack.setBounds(375, 30, 150, 30);
        return btnBack;
    }

    public static String[] getSelectedRow(JTable table, int row) {
        String[] chooser = new String[4];
        int col = 0;
        for (int i = 0; i < 4; i++) {
            chooser[i] = table.getValueAt(row, col).toString();
            col++;
        }
        return chooser;
    }

    private void getReviewerInfo(DefaultTableModel dtm_reviewer) {
        ArrayList<String[]> results = ConferenceChair.getReviewerInfo();
        for (String[] result : results) {
            dtm_reviewer.addRow(result);
        }
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
